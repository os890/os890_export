<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <bean id="personPage" class="at.gp.web.jsf.extval.PersonPage" scope="request">
        <property name="person" ref="person"/>
    </bean>

    <bean id="person" class="at.gp.web.jsf.extval.domain.Person" scope="session"/>

    <!--
        provide the validation strategy as spring bean to use the dependency injection mechanism of spring and
        also other mechanisms like aop!
        the bean name follows the available name conventions (also the custom name conventions are supported).
    -->

    <bean id="customRequiredValidationStrategy" class="at.gp.web.jsf.extval.validation.CustomRequiredValidator" lazy-init="true">
        <property name="messageResolver" ref="customMsgResolver"/>
        <!-- it's just a demo - you can inject other spring beans into the validation strategy -->
        <property name="requiredValidationService" ref="demoRequiredValidationService"/>
    </bean>

    <bean id="customMsgResolver" class="org.apache.myfaces.extensions.validator.core.validation.message.resolver.DefaultValidationErrorMessageResolver" lazy-init="true">
        <!-- with jsf 1.2 you can use the var name of resource-bundle see faces-config.xml -->
        <property name="messageBundleVarName" value="messages"/>
    </bean>

    <!-- it's just a small service for this demo. the intention is to use a real service instead
    e.g. to validate the object based on values in a database -->
    <bean id="demoRequiredValidationService" class="at.gp.web.jsf.extval.validation.DemoRequiredValidationServiceImpl"/>

    <!--
        if you would like to add a meta-data transformer, you can use the BeanValidationStrategyAdapterImpl class.

        if there's a proxy around your validation strategy (e.g. due to aop exception handling)
        you have to provide the package + class name of the implementing strategy via the validationStrategyClassName property.
        (just copy the content of the class attribute of your validation strategy bean).

        use scope="prototype", if it makes sense to do that
    -->
    <!--
    <bean id="customRequiredValidationStrategy" class="org.apache.myfaces.extensions.validator.core.validation.strategy.BeanValidationStrategyAdapterImpl" lazy-init="true">
        <property name="validationStrategy" ref="customRequiredValidationStrategyImpl"/>
        ...
    </bean>

    <bean id="customRequiredValidationStrategyImpl" class="at.gp.web.jsf.extval.validation.CustomRequiredValidator" lazy-init="true">
        <property name="messageResolver" ref="customMsgResolver"/>
        <property name="requiredValidationService" ref="demoRequiredValidationService"/>
    </bean>
    -->
</beans>